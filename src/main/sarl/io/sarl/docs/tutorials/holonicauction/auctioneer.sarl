package io.sarl.docs.tutorials.holonicauction

import io.sarl.core.Initialize
import io.sarl.core.InnerContextAccess
import io.sarl.lang.core.Address
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import io.sarl.core.Behaviors
import io.sarl.core.Logging

agent Auctioneer {
					
	uses Behaviors, InnerContextAccess, Lifecycle, Schedules, Logging
	
	var maxBid = 0f
	var winner : Address
	var hasBid = false 
	var isAuctionOpened = true

	on Initialize {
		println("Creating bidders")
		for(i : 1..3) {
			spawnInContext(typeof(Bidder), innerContext)
		}
		
		println("Propose initial price: 50")
		wake(new Price(50))
		
		in(10000) [
			val waitTask = task("wait-task")
			waitTask.every(10000) [
				synchronized(this) {
					if (!isAuctionOpened) {
						println("No more action: waiting for bidder death.")
						if (!hasMemberAgent) {
							waitTask.cancel
							killMe
						}
					} else {
						if (!hasBid) {
							println("NO MORE BID")
							isAuctionOpened = false
							if (winner === null) {
								println("No winner")
							} else {
								println("The winner is " + winner
									+ " with the bid of " + maxBid)
							}
							println("Killing the bidders")
							wake(new StopAuction)
						}
						else {
							var newPrice : float
							if (winner === null) {
								newPrice = 50
							} else {
								newPrice = maxBid
							}
							println("NEXT BIDDING TURN: " + newPrice)
							wake(new Price(newPrice))
						}
						hasBid = false
					}
				}
			]
		]
	}
		
	on Bid [ isAuctionOpened ] {
		println("Receiving bid: " + occurrence.value)
		synchronized(this) {
			hasBid = true
			if (occurrence.value > maxBid) {
				println("    better bid")
				maxBid = occurrence.value
				winner = occurrence.source
			}
		}
	}

}