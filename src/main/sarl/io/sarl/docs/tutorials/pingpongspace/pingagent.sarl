package io.sarl.docs.tutorials.pingpongspace

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Schedules
import io.sarl.util.Scopes
import io.sarl.core.Behaviors
import io.sarl.util.OpenEventSpace
import io.sarl.util.OpenEventSpaceSpecification
import java.util.UUID

agent PingAgent {

	uses DefaultContextInteractions, Schedules, Behaviors

	var space : OpenEventSpace

	on Pong {
		println("Receiving Pong #" + occurrence.index)
		println("Sending Ping #" + (occurrence.index + 1))
		var evt = new Ping( occurrence.index + 1 )
		evt.source = space.getAddress(getID())
		emit(
			evt,
			Scopes.addresses( occurrence.source )
		)
	}

	on Initialize {
		space = defaultContext.getOrCreateSpace(
			typeof(OpenEventSpaceSpecification),
			occurrence.parameters.get(0) as UUID)
		space.register(asEventListener())

		println("Waiting for Pong Agent")
		val task = task("waiting_for_partner")
		task.every(1000) [
			if (defaultSpace.participants.size > 1) {
				println("Pong Agent detected.")
				println("Sending Ping #0")
				var evt = new Ping(0)
				evt.source = space.getAddress(getID())
				emit( evt )
				task.cancel
			}
		]
	}

}
