package io.sarl.demos.counter

import io.sarl.core.Behaviors
import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules
import java.util.concurrent.atomic.AtomicInteger

event Hello

event Count

event Die

agent CounterAgent {

	uses Lifecycle, Schedules, DefaultContextInteractions, Behaviors

	val count = new AtomicInteger

	var started = false
 
	on Initialize {
		println("COUNTER: Starting")
		task("discovery").every(1000) [ 
			emit(new Hello)
		]
	}

	on Hello [ occurrence.source != defaultAddress && !started ] {
		println("COUNTER: Found another agent => " + occurrence.source)
		println("COUNTER: I'm " + defaultAddress)
		started = true
		task("discovery").cancel
		println("COUNTER: Starting to count")
		wake(new Count) 
	}

	on Count {
		println("COUNTER: count => " + count.get) 
		if(count.get == 3) {
			println("COUNTER: Killing") 
			emit(new Die) 
			killMe
		} else {
			in(1000) [ 
				count.incrementAndGet 
				wake(new Count) 
			]
		}
	}

}

agent SecondAgent {

	uses Lifecycle, Schedules, DefaultContextInteractions, Behaviors
	
	on Initialize {
		println("PARTNER: Starting")
	}

	on Hello [ occurrence.source != defaultAddress ] {
		println("PARTNER: Say hello!")
		emit(new Hello) 
	}

	on Die {
		println("PARTNER: Killing")
		killMe
	}

}









