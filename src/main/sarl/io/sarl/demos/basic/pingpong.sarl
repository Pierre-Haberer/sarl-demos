package io.sarl.demos.basic

import io.sarl.core.DefaultContextInteractions
import io.sarl.core.Initialize
import io.sarl.core.Lifecycle
import io.sarl.core.Schedules

event Ping {
	var value : Integer
	new (v : Integer) {
		value = v
	}
}

event Pong {
	var value : Integer
	new (v : Integer) {
		value = v
	}
}

/*
 * Send a ping.
 */
agent PingAgent{
	
	uses Lifecycle, Schedules, DefaultContextInteractions
	
	var count : Integer
	
	/* Print "Hello World" when spawned and wait 2 seconds are kill itself */
	on Initialize {
		println("Starting waiting for partner")
		count = 0
		in(2000) [
			sendPing
		]
	}
	
	def sendPing {
		if (defaultSpace.participants.size()>1) {
			println("Send Ping: "+count)
			emit(new Ping(count))
			count = count + 1		
		}
		else {
			println("I'am alone")
			in(2000) [
				sendPing
			]
		}
	} 
	
	on Pong {
		println("Recv Pong: "+occurrence.value)
		in(1000) [
			println("Send Ping: "+count)
			emit(new Ping(count))
			count = count + 1		
		]
	}
	
}

/*
 * Receive a ping, send a pong.
 */
agent PongAgent {

	uses Lifecycle, DefaultContextInteractions

	on Initialize {
		println("Waiting for ping")
	}

	on Ping {
		println("Recv Ping: "+occurrence.value)
		println("Send Pong: "+occurrence.value)
		emit(new Pong(occurrence.value))
	}
	
}